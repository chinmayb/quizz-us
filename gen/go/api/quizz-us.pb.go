// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: api/quizz-us.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// playerStatus status
type PlayerStatus int32

const (
	PlayerStatus_PLAYING      PlayerStatus = 0
	PlayerStatus_WAITING      PlayerStatus = 1
	PlayerStatus_DISCONNECTED PlayerStatus = 2
)

// Enum value maps for PlayerStatus.
var (
	PlayerStatus_name = map[int32]string{
		0: "PLAYING",
		1: "WAITING",
		2: "DISCONNECTED",
	}
	PlayerStatus_value = map[string]int32{
		"PLAYING":      0,
		"WAITING":      1,
		"DISCONNECTED": 2,
	}
)

func (x PlayerStatus) Enum() *PlayerStatus {
	p := new(PlayerStatus)
	*p = x
	return p
}

func (x PlayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_quizz_us_proto_enumTypes[0].Descriptor()
}

func (PlayerStatus) Type() protoreflect.EnumType {
	return &file_api_quizz_us_proto_enumTypes[0]
}

func (x PlayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatus.Descriptor instead.
func (PlayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{0}
}

// GamePlayStatus status
type GamePlayStatus int32

const (
	GamePlayStatus_ON_GOING    GamePlayStatus = 0
	GamePlayStatus_GAME_OVER   GamePlayStatus = 1
	GamePlayStatus_NOT_STARTED GamePlayStatus = 2
)

// Enum value maps for GamePlayStatus.
var (
	GamePlayStatus_name = map[int32]string{
		0: "ON_GOING",
		1: "GAME_OVER",
		2: "NOT_STARTED",
	}
	GamePlayStatus_value = map[string]int32{
		"ON_GOING":    0,
		"GAME_OVER":   1,
		"NOT_STARTED": 2,
	}
)

func (x GamePlayStatus) Enum() *GamePlayStatus {
	p := new(GamePlayStatus)
	*p = x
	return p
}

func (x GamePlayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePlayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_quizz_us_proto_enumTypes[1].Descriptor()
}

func (GamePlayStatus) Type() protoreflect.EnumType {
	return &file_api_quizz_us_proto_enumTypes[1]
}

func (x GamePlayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePlayStatus.Descriptor instead.
func (GamePlayStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{1}
}

// GamePlayAction defines the action the host can peform, he can begin
// or end the game
type GamePlayAction int32

const (
	GamePlayAction_UNKNOWN   GamePlayAction = 0
	GamePlayAction_JOIN      GamePlayAction = 1
	GamePlayAction_HEARTBEAT GamePlayAction = 2
	GamePlayAction_BEGIN     GamePlayAction = 3
	GamePlayAction_END       GamePlayAction = 4
)

// Enum value maps for GamePlayAction.
var (
	GamePlayAction_name = map[int32]string{
		0: "UNKNOWN",
		1: "JOIN",
		2: "HEARTBEAT",
		3: "BEGIN",
		4: "END",
	}
	GamePlayAction_value = map[string]int32{
		"UNKNOWN":   0,
		"JOIN":      1,
		"HEARTBEAT": 2,
		"BEGIN":     3,
		"END":       4,
	}
)

func (x GamePlayAction) Enum() *GamePlayAction {
	p := new(GamePlayAction)
	*p = x
	return p
}

func (x GamePlayAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePlayAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_quizz_us_proto_enumTypes[2].Descriptor()
}

func (GamePlayAction) Type() protoreflect.EnumType {
	return &file_api_quizz_us_proto_enumTypes[2]
}

func (x GamePlayAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePlayAction.Descriptor instead.
func (GamePlayAction) EnumDescriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{2}
}

// Game is an object which represents the type of the games we do support at
// the global level
type GameKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// kind of the Game for e.g. jklm, ludo etc
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// data_location is the authorized url endpoint where you can access the data
	DataLocation  string `protobuf:"bytes,4,opt,name=data_location,json=dataLocation,proto3" json:"data_location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameKind) Reset() {
	*x = GameKind{}
	mi := &file_api_quizz_us_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameKind) ProtoMessage() {}

func (x *GameKind) ProtoReflect() protoreflect.Message {
	mi := &file_api_quizz_us_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameKind.ProtoReflect.Descriptor instead.
func (*GameKind) Descriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{0}
}

func (x *GameKind) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GameKind) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GameKind) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameKind) GetDataLocation() string {
	if x != nil {
		return x.DataLocation
	}
	return ""
}

// A Game  is a message sent while playing
type Game struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GameKindId string                 `protobuf:"bytes,2,opt,name=game_kind_id,json=gameKindId,proto3" json:"game_kind_id,omitempty"`
	// unique code of the game instance which can be used to join the game by
	// player
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Result        string                 `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
	Status        string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Spec          *Game_Spec             `protobuf:"bytes,8,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Game) Reset() {
	*x = Game{}
	mi := &file_api_quizz_us_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_api_quizz_us_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{1}
}

func (x *Game) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Game) GetGameKindId() string {
	if x != nil {
		return x.GameKindId
	}
	return ""
}

func (x *Game) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Game) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Game) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Game) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Game) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Game) GetSpec() *Game_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Player is a game player
type Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Score         int32                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsBot         bool                   `protobuf:"varint,4,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	Status        PlayerStatus           `protobuf:"varint,5,opt,name=status,proto3,enum=api.PlayerStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_api_quizz_us_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_api_quizz_us_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{2}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *Player) GetStatus() PlayerStatus {
	if x != nil {
		return x.Status
	}
	return PlayerStatus_PLAYING
}

// GameSummary is a message sent after the game is over or
// if the game is not started
type GameSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*Player              `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Winner        *Player                `protobuf:"bytes,2,opt,name=winner,proto3" json:"winner,omitempty"`
	Status        GamePlayStatus         `protobuf:"varint,3,opt,name=status,proto3,enum=api.GamePlayStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameSummary) Reset() {
	*x = GameSummary{}
	mi := &file_api_quizz_us_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSummary) ProtoMessage() {}

func (x *GameSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_quizz_us_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSummary.ProtoReflect.Descriptor instead.
func (*GameSummary) Descriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{3}
}

func (x *GameSummary) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameSummary) GetWinner() *Player {
	if x != nil {
		return x.Winner
	}
	return nil
}

func (x *GameSummary) GetStatus() GamePlayStatus {
	if x != nil {
		return x.Status
	}
	return GamePlayStatus_ON_GOING
}

// Gameplay command contains the actual answer to the question. And server returns
// the result of the answer.
type GamePlayCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// answer given by the player
	PlayerAnswer string `protobuf:"bytes,2,opt,name=player_answer,json=playerAnswer,proto3" json:"player_answer,omitempty"`
	// question
	Question string `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	// actual answer
	CorrectAnswer string `protobuf:"bytes,4,opt,name=correct_answer,json=correctAnswer,proto3" json:"correct_answer,omitempty"`
	// timestamp question was asked
	QuestionTime  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=question_time,json=questionTime,proto3" json:"question_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GamePlayCommand) Reset() {
	*x = GamePlayCommand{}
	mi := &file_api_quizz_us_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GamePlayCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayCommand) ProtoMessage() {}

func (x *GamePlayCommand) ProtoReflect() protoreflect.Message {
	mi := &file_api_quizz_us_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayCommand.ProtoReflect.Descriptor instead.
func (*GamePlayCommand) Descriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{4}
}

func (x *GamePlayCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GamePlayCommand) GetPlayerAnswer() string {
	if x != nil {
		return x.PlayerAnswer
	}
	return ""
}

func (x *GamePlayCommand) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *GamePlayCommand) GetCorrectAnswer() string {
	if x != nil {
		return x.CorrectAnswer
	}
	return ""
}

func (x *GamePlayCommand) GetQuestionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.QuestionTime
	}
	return nil
}

type GamePlay struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// player ID
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Types that are valid to be assigned to Cmd:
	//
	//	*GamePlay_Action
	//	*GamePlay_Summary
	//	*GamePlay_Command
	Cmd           isGamePlay_Cmd `protobuf_oneof:"cmd"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GamePlay) Reset() {
	*x = GamePlay{}
	mi := &file_api_quizz_us_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GamePlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlay) ProtoMessage() {}

func (x *GamePlay) ProtoReflect() protoreflect.Message {
	mi := &file_api_quizz_us_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlay.ProtoReflect.Descriptor instead.
func (*GamePlay) Descriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{5}
}

func (x *GamePlay) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GamePlay) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GamePlay) GetCmd() isGamePlay_Cmd {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *GamePlay) GetAction() GamePlayAction {
	if x != nil {
		if x, ok := x.Cmd.(*GamePlay_Action); ok {
			return x.Action
		}
	}
	return GamePlayAction_UNKNOWN
}

func (x *GamePlay) GetSummary() *GameSummary {
	if x != nil {
		if x, ok := x.Cmd.(*GamePlay_Summary); ok {
			return x.Summary
		}
	}
	return nil
}

func (x *GamePlay) GetCommand() *GamePlayCommand {
	if x != nil {
		if x, ok := x.Cmd.(*GamePlay_Command); ok {
			return x.Command
		}
	}
	return nil
}

type isGamePlay_Cmd interface {
	isGamePlay_Cmd()
}

type GamePlay_Action struct {
	Action GamePlayAction `protobuf:"varint,3,opt,name=action,proto3,enum=api.GamePlayAction,oneof"`
}

type GamePlay_Summary struct {
	Summary *GameSummary `protobuf:"bytes,4,opt,name=summary,proto3,oneof"`
}

type GamePlay_Command struct {
	Command *GamePlayCommand `protobuf:"bytes,5,opt,name=command,proto3,oneof"`
}

func (*GamePlay_Action) isGamePlay_Cmd() {}

func (*GamePlay_Summary) isGamePlay_Cmd() {}

func (*GamePlay_Command) isGamePlay_Cmd() {}

type Game_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// duration of the question
	QuestionDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=question_duration,json=questionDuration,proto3" json:"question_duration,omitempty"`
	TargetScore      int32                `protobuf:"varint,2,opt,name=target_score,json=targetScore,proto3" json:"target_score,omitempty"`
	TargetTime       *durationpb.Duration `protobuf:"bytes,3,opt,name=target_time,json=targetTime,proto3" json:"target_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Game_Spec) Reset() {
	*x = Game_Spec{}
	mi := &file_api_quizz_us_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game_Spec) ProtoMessage() {}

func (x *Game_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_api_quizz_us_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game_Spec.ProtoReflect.Descriptor instead.
func (*Game_Spec) Descriptor() ([]byte, []int) {
	return file_api_quizz_us_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Game_Spec) GetQuestionDuration() *durationpb.Duration {
	if x != nil {
		return x.QuestionDuration
	}
	return nil
}

func (x *Game_Spec) GetTargetScore() int32 {
	if x != nil {
		return x.TargetScore
	}
	return 0
}

func (x *Game_Spec) GetTargetTime() *durationpb.Duration {
	if x != nil {
		return x.TargetTime
	}
	return nil
}

var File_api_quizz_us_proto protoreflect.FileDescriptor

var file_api_quizz_us_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x2d, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc6, 0x03, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0xad, 0x01, 0x0a, 0x04, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0f, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x2a, 0x3a,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x0e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x0e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x4f, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x4e, 0x44, 0x10, 0x04, 0x32, 0x40, 0x0a, 0x05, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x22, 0x05, 0x2f,
	0x70, 0x6c, 0x61, 0x79, 0x28, 0x01, 0x30, 0x01, 0x42, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x42, 0x0c, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x55, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x0a, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0xa2,
	0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x41, 0x70, 0x69, 0xca, 0x02, 0x03, 0x41, 0x70,
	0x69, 0xe2, 0x02, 0x0f, 0x41, 0x70, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_quizz_us_proto_rawDescOnce sync.Once
	file_api_quizz_us_proto_rawDescData = file_api_quizz_us_proto_rawDesc
)

func file_api_quizz_us_proto_rawDescGZIP() []byte {
	file_api_quizz_us_proto_rawDescOnce.Do(func() {
		file_api_quizz_us_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_quizz_us_proto_rawDescData)
	})
	return file_api_quizz_us_proto_rawDescData
}

var file_api_quizz_us_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_quizz_us_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_quizz_us_proto_goTypes = []any{
	(PlayerStatus)(0),             // 0: api.PlayerStatus
	(GamePlayStatus)(0),           // 1: api.GamePlayStatus
	(GamePlayAction)(0),           // 2: api.GamePlayAction
	(*GameKind)(nil),              // 3: api.GameKind
	(*Game)(nil),                  // 4: api.Game
	(*Player)(nil),                // 5: api.Player
	(*GameSummary)(nil),           // 6: api.GameSummary
	(*GamePlayCommand)(nil),       // 7: api.GamePlayCommand
	(*GamePlay)(nil),              // 8: api.GamePlay
	(*Game_Spec)(nil),             // 9: api.Game.Spec
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 11: google.protobuf.Duration
}
var file_api_quizz_us_proto_depIdxs = []int32{
	10, // 0: api.Game.created_at:type_name -> google.protobuf.Timestamp
	10, // 1: api.Game.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 2: api.Game.spec:type_name -> api.Game.Spec
	0,  // 3: api.Player.status:type_name -> api.PlayerStatus
	5,  // 4: api.GameSummary.players:type_name -> api.Player
	5,  // 5: api.GameSummary.winner:type_name -> api.Player
	1,  // 6: api.GameSummary.status:type_name -> api.GamePlayStatus
	10, // 7: api.GamePlayCommand.question_time:type_name -> google.protobuf.Timestamp
	2,  // 8: api.GamePlay.action:type_name -> api.GamePlayAction
	6,  // 9: api.GamePlay.summary:type_name -> api.GameSummary
	7,  // 10: api.GamePlay.command:type_name -> api.GamePlayCommand
	11, // 11: api.Game.Spec.question_duration:type_name -> google.protobuf.Duration
	11, // 12: api.Game.Spec.target_time:type_name -> google.protobuf.Duration
	8,  // 13: api.Games.Play:input_type -> api.GamePlay
	8,  // 14: api.Games.Play:output_type -> api.GamePlay
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_quizz_us_proto_init() }
func file_api_quizz_us_proto_init() {
	if File_api_quizz_us_proto != nil {
		return
	}
	file_api_quizz_us_proto_msgTypes[5].OneofWrappers = []any{
		(*GamePlay_Action)(nil),
		(*GamePlay_Summary)(nil),
		(*GamePlay_Command)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_quizz_us_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_quizz_us_proto_goTypes,
		DependencyIndexes: file_api_quizz_us_proto_depIdxs,
		EnumInfos:         file_api_quizz_us_proto_enumTypes,
		MessageInfos:      file_api_quizz_us_proto_msgTypes,
	}.Build()
	File_api_quizz_us_proto = out.File
	file_api_quizz_us_proto_rawDesc = nil
	file_api_quizz_us_proto_goTypes = nil
	file_api_quizz_us_proto_depIdxs = nil
}
