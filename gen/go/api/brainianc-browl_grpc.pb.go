// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/brainianc-browl.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BrainiacBrawl_Play_FullMethodName = "/api.BrainiacBrawl/Play"
)

// BrainiacBrawlClient is the client API for BrainiacBrawl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrainiacBrawlClient interface {
	// A Bidirectional streaming gameplay.
	//
	// Accepts a stream of GamePlay while a game is being played,
	// while receiving other GamePlay (e.g. from other users).
	Play(ctx context.Context, opts ...grpc.CallOption) (BrainiacBrawl_PlayClient, error)
}

type brainiacBrawlClient struct {
	cc grpc.ClientConnInterface
}

func NewBrainiacBrawlClient(cc grpc.ClientConnInterface) BrainiacBrawlClient {
	return &brainiacBrawlClient{cc}
}

func (c *brainiacBrawlClient) Play(ctx context.Context, opts ...grpc.CallOption) (BrainiacBrawl_PlayClient, error) {
	stream, err := c.cc.NewStream(ctx, &BrainiacBrawl_ServiceDesc.Streams[0], BrainiacBrawl_Play_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &brainiacBrawlPlayClient{stream}
	return x, nil
}

type BrainiacBrawl_PlayClient interface {
	Send(*GamePlay) error
	Recv() (*GamePlay, error)
	grpc.ClientStream
}

type brainiacBrawlPlayClient struct {
	grpc.ClientStream
}

func (x *brainiacBrawlPlayClient) Send(m *GamePlay) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brainiacBrawlPlayClient) Recv() (*GamePlay, error) {
	m := new(GamePlay)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrainiacBrawlServer is the server API for BrainiacBrawl service.
// All implementations must embed UnimplementedBrainiacBrawlServer
// for forward compatibility
type BrainiacBrawlServer interface {
	// A Bidirectional streaming gameplay.
	//
	// Accepts a stream of GamePlay while a game is being played,
	// while receiving other GamePlay (e.g. from other users).
	Play(BrainiacBrawl_PlayServer) error
	mustEmbedUnimplementedBrainiacBrawlServer()
}

// UnimplementedBrainiacBrawlServer must be embedded to have forward compatible implementations.
type UnimplementedBrainiacBrawlServer struct {
}

func (UnimplementedBrainiacBrawlServer) Play(BrainiacBrawl_PlayServer) error {
	return status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedBrainiacBrawlServer) mustEmbedUnimplementedBrainiacBrawlServer() {}

// UnsafeBrainiacBrawlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrainiacBrawlServer will
// result in compilation errors.
type UnsafeBrainiacBrawlServer interface {
	mustEmbedUnimplementedBrainiacBrawlServer()
}

func RegisterBrainiacBrawlServer(s grpc.ServiceRegistrar, srv BrainiacBrawlServer) {
	s.RegisterService(&BrainiacBrawl_ServiceDesc, srv)
}

func _BrainiacBrawl_Play_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrainiacBrawlServer).Play(&brainiacBrawlPlayServer{stream})
}

type BrainiacBrawl_PlayServer interface {
	Send(*GamePlay) error
	Recv() (*GamePlay, error)
	grpc.ServerStream
}

type brainiacBrawlPlayServer struct {
	grpc.ServerStream
}

func (x *brainiacBrawlPlayServer) Send(m *GamePlay) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brainiacBrawlPlayServer) Recv() (*GamePlay, error) {
	m := new(GamePlay)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrainiacBrawl_ServiceDesc is the grpc.ServiceDesc for BrainiacBrawl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrainiacBrawl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BrainiacBrawl",
	HandlerType: (*BrainiacBrawlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Play",
			Handler:       _BrainiacBrawl_Play_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/brainianc-browl.proto",
}
